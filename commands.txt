from newapp.models import *

1. Создать двух пользователей (с помощью метода User.objects.create_user).
user1 = User.objects.create_user(username='Ivan', first_name='Ivanov')
Author.objects.create(authorUser=user1)
user2 = User.objects.create_user(username='Mikhail', first_name='Secret')
Author.objects.create(authorUser=user2)

2. Создать два объекта модели Author, связанные с пользователями
Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3.Добавить 4 категории в модель Category.
Category.objects.create(name='IT')
Category.objects.create(name='Education')
Category.objects.create(name='Sport')
Category.objects.create(name='Game')

4. Добавляем 2 статьи и 1 новость.
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Ivan')), categoryType='NW', title='smth title', text='smth text')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Ivan')), categoryType='AR', title='2222smth title', text='2222smth text')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Mikhail')), categoryType='AR', title='3333smth title', text='3333smth text')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
Получаем посты
p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)

Получаем категории
c1 = Category.objects.get(name='IT')
c2 = Category.objects.get(name='Education')
c3 = Category.objects.get(name='Sport')
c4 = Category.objects.get(name='Game')

Создаем связь
p1.postCategory.add(c1)
p2.postCategory.add(c2)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Comment.objects.create(commentUser=User.objects.get(username='Ivan'), commentPost= Post.objects.get(pk=1), text='comment text1')
Comment.objects.create(commentUser=User.objects.get(username='Ivan'), commentPost= Post.objects.get(pk=2), text='comment text2')
Comment.objects.create(commentUser=User.objects.get(username='Mikhail'), commentPost= Post.objects.get(pk=3), text='comment text2')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).dislike()

Comment.objects.get(pk=1).like()
Comment.objects.get(pk=2).like()
Comment.objects.get(pk=3).dislike()

8. Обновить рейтинги пользователей.
Author.objects.get(authorUser=User.objects.get(username='Ivan')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Mikhail')).update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

Author.objects.get(authorUser=User.objects.get(username='Ivan')).ratingAuthor
Author.objects.get(authorUser=User.objects.get(username='Mikhail')).ratingAuthor

best = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]
print(best)
print(User.objects.get(id='1'))


10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
best_article = Post.objects.all().order_by('-rating').values('dateCreation','authorArticle','rating','title')[0]
print(best_article)

a= Post.objects.get(title='smth title').preview()
print(a)

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
b = (Post.objects.get(title ='smth title')).comment_set.all().values('rating','text','dateCreated','commentUser')
print(b)





